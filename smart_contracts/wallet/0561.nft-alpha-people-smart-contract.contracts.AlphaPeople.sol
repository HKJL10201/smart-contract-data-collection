// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "./Base64.sol";
import "./AlphaDNA.sol";


contract AlphaPeople is ERC721, ERC721Enumerable, AlphaDNA {
  using Counters for Counters.Counter;
  using Strings for uint256;

  Counters.Counter private _idCounter;
  uint256 public maxSupply;
  mapping(uint256 => uint256) public tokenDNA;

  constructor(uint256 _maxSupply) ERC721("AlphaPeople", "ALP") {
    maxSupply = _maxSupply;
  }

  function mint() public payable {
    // require(msg.value >= 50000000000000000,"you need 0.05 ETH to mint the AlphaPeople");
    uint256 current = _idCounter.current();
    require(current < maxSupply, "No NFT lefts to mint");
    
    tokenDNA[current] = pseudoRandomDNA(current, msg.sender);

    _safeMint(msg.sender, current);
    _idCounter.increment();

  }

  function _baseURI () internal pure override returns (string memory) {
    return "https://avataaars.io/";
  }

  function _paramsURI(uint256 _dna) internal view returns (string memory) {
    string memory params;
    {
      params = string(abi.encodePacked(
      "accessoriesType=",
      _getAccesoryType(_dna),
      "&clotheColor=",
      _getClotheColor(_dna),
      "&clotheType=",
      _getClotheType(_dna),
      "&eyeType=",
      _getEyeType(_dna),
      "&eyebrowType=",
      _getEyebrowType(_dna),
      "&facialHairColor=",
      _getFacialHairColor(_dna),
      "&facialHairType=",
      _getFacialHairType(_dna),
      "&hairColor=",
      _getHairColor(_dna),
      "&hatColor=",
      _getHatColor(_dna),
      "&graphicType=",
      _getGraphicType(_dna),
      "&mouthType=",
      _getMouthType(_dna),
      "&skinColor=",
      _getSkinColor(_dna)
      ));
    }
    

    return string(abi.encodePacked(params,"&topType=",_getTopType(_dna)));
  }

  function getDNAImage (uint256 _dna) public view returns(string memory) {
    string memory baseURI = _baseURI();
    string memory paramsURI = _paramsURI(_dna);
    string memory response = string(abi.encodePacked(baseURI,"?",paramsURI));
    return response;
  }

  function tokenURI(uint256 tokenId) 
    public 
    view 
    override 
    returns (string memory) 
  {
    require(_exists(tokenId),"Token doesn't exist");
    uint256 dna = tokenDNA[tokenId];

    string memory image = getDNAImage(dna);

    string memory jsonURI = Base64.encode(
      // Here we can add more metada according to opensea metadata or any marketplace standard
      abi.encodePacked(
        '{ "name": "AlphaPeople #',
        tokenId.toString(),
        '", "description": "Alpha People Unique in the world", "image":"',
        image,
        '"}'
      )
    );
    return string(abi.encodePacked("data:application/json;base64,",jsonURI));
  }

  // Functions override generated by openzeppelin wizard to merge enumerable and ERC721
  function _beforeTokenTransfer(address from, address to, uint256 tokenId)
      internal
      override(ERC721, ERC721Enumerable)
    {
      super._beforeTokenTransfer(from, to, tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
      public
      view
      override(ERC721, ERC721Enumerable)
      returns (bool)
    {
      return super.supportsInterface(interfaceId);
    }
}


