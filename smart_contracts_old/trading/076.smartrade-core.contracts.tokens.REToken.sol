// SPDX-License-Identifier: Apache-2.0

pragma solidity ^0.6.0;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/GSN/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721Burnable.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721Pausable.sol";

/**
 * @dev {REToken} token, including:
 *
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - a super role that can perform all actions, including miner and pauser
 *    rights, also has ability to burn tokens
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles.
 *
 * The account that deploys the contract will be granted the minter and pauser,
 * as well as the super role, which will let it grant both minter
 * and pauser roles to other accounts
 */
contract REToken is Context, AccessControl, ERC721Burnable, ERC721Pausable {
    using Counters for Counters.Counter;

    bytes32 public constant SUPER_ROLE = keccak256("SUPER_ROLE");
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    // Token id tracker
    Counters.Counter private _tokenIdTracker;

    /**
     * @dev Grants `SUPER_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory name,
        string memory symbol,
        string memory baseURI
    )
        public
        ERC721(name, symbol)
    {
        _setupRole(SUPER_ROLE, _msgSender());

        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());

        // Sets each role admin to super role
        _setRoleAdmin(MINTER_ROLE, SUPER_ROLE);
        _setRoleAdmin(PAUSER_ROLE, SUPER_ROLE);
        _setRoleAdmin(SUPER_ROLE, SUPER_ROLE);

        _setBaseURI(baseURI);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_safeMint}.
     *
     * Requirements:
     *
     * - the caller must have minter (`MINTER_ROLE`) or super (`SUPER_ROLE`) role.
     */
    function mint(address to) public virtual {
        require(
            hasRole(MINTER_ROLE, _msgSender()) || hasRole(SUPER_ROLE, _msgSender()),
            "REToken: must have minter or super role to mint"
        );

        // We can just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _safeMint(to, _tokenIdTracker.current());
        _tokenIdTracker.increment();
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have pauser (`PAUSER_ROLE`) or super (`SUPER_ROLE`) role.
     */
    function pause() public virtual {
        require(
            hasRole(PAUSER_ROLE, _msgSender()) || hasRole(SUPER_ROLE, _msgSender()),
            "REToken: must have pauser or super role to pause"
        );

        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have pauser (`PAUSER_ROLE`) or super (`SUPER_ROLE`) role.
     */
    function unpause() public virtual {
        require(
            hasRole(PAUSER_ROLE, _msgSender()) || hasRole(SUPER_ROLE, _msgSender()),
            "REToken: must have pauser or super role to unpause"
        );

        _unpause();
    }

    /**
     * @dev Burns `tokenId`. See {ERC721-_burn}.
     *
     * Requirements:
     *
     * - the caller must have super role (`SUPER_ROLE`).
     */
    function burn(uint256 tokenId) public virtual override {
        require(
            hasRole(SUPER_ROLE, _msgSender()),
            "REToken: must have super role to burn"
        );

        _burn(tokenId);
    }

    /**
     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`. See {ERC721-_setTokenURI}.
     *
     * Requirements:
     *
     * - the caller must have super role (`SUPER_ROLE`).
     */
    function setTokenURI(uint256 tokenId, string memory uri) public virtual {
        require(
            hasRole(SUPER_ROLE, _msgSender()),
            "REToken: must have super role to set token URI"
        );

        _setTokenURI(tokenId, uri);
    }

    /**
     * @dev Sets the base URI for all token IDs. See {ERC721-_setBaseURI}.
     *
     * Requirements:
     *
     * - the caller must have super role (`SUPER_ROLE`).
     */
    function setBaseURI(string memory baseURI) public virtual {
        require(
            hasRole(SUPER_ROLE, _msgSender()),
            "REToken: must have super role to set base URI"
        );

        _setBaseURI(baseURI);
    }

    /**
     * @dev See {ERC721-_beforeTokenTransfer} and {ERC721Pausable-_beforeTokenTransfer}.
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    )
        internal
        virtual
        override(ERC721, ERC721Pausable)
    {
        super._beforeTokenTransfer(from, to, tokenId);
    }
}
