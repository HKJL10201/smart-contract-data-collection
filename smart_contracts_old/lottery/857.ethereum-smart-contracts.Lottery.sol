//SPDX-License-Identifier: GPL-3.0

pragma solidity >= 0.5.0 < 0.9.0;


contract Lottery {

    //array of players participating in the lottery
    address payable[] public players;

    //manager of lottery
    address public manager;

    constructor(){

        //set the manager of the lottery
        manager = msg.sender;


    }

    //receive function will be executed when an account directly sends money tho this contract address
    receive() external payable {

        require(msg.value == 0.1 ether);

        //store the participant
        players.push(payable(msg.sender));

    }

    //get the balance of this contract
    function getBalance() public view returns (uint){

        require(msg.sender == manager);

        return address(this).balance;
    }

    //get a random number
    function random() public view returns (uint){

        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, players.length)));


    }

    //pick a winner
    function pickWinner() public {

        require(msg.sender == manager);

        require(players.length >= 3);

        uint r = random();

        address payable winner;

        //get a index between 0 and players array length
        uint index = r % players.length;

        //pick a winner
        winner = players[index];

        //transfer the amount generated by the contract to this winner
        winner.transfer(getBalance());


        //reset the lottery
        //delete all the players participated  in the lottery
        players = new address payable[](0);

    }

}